// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// Labels defines model for labels.
type Labels = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetIpxeByLabelsParams defines parameters for GetIpxeByLabels.
type GetIpxeByLabelsParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetBootIpxe(ctx echo.Context) error
	// Retrieve an iPXE manifest by labels
	// (GET /ipxe)
	GetIpxeByLabels(ctx echo.Context, params GetIpxeByLabelsParams) error
	// Retrieve dynamically a configuration file by its profile name and config ID.
	// (GET /profile/{profileName}/config/{configID})
	GetConfigByID(ctx echo.Context, profileName string, configID UUID, params GetConfigByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBootIpxe converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootIpxe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBootIpxe(ctx)
	return err
}

// GetIpxeByLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeByLabels(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeByLabelsParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeByLabels(ctx, params)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileName" -------------
	var profileName string

	err = runtime.BindStyledParameterWithOptions("simple", "profileName", ctx.Param("profileName"), &profileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileName: %s", err))
	}

	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, profileName, configID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetBootIpxe)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeByLabels)
	router.GET(baseURL+"/profile/:profileName/config/:configID", wrapper.GetConfigByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+n8AAAD//0HnTA+JEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
