// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// Labels defines model for labels.
type Labels = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetIpxeByLabelsParams defines parameters for GetIpxeByLabels.
type GetIpxeByLabelsParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetBootIpxe(ctx echo.Context) error
	// Retrieve an iPXE manifest by labels
	// (GET /ipxe)
	GetIpxeByLabels(ctx echo.Context, params GetIpxeByLabelsParams) error
	// Retrieve dynamically a configuration file by its profile and config ID
	// (GET /profile/{profileID}/config/{configID})
	GetConfigByID(ctx echo.Context, profileID UUID, configID UUID, params GetConfigByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBootIpxe converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootIpxe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBootIpxe(ctx)
	return err
}

// GetIpxeByLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeByLabels(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeByLabelsParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeByLabels(ctx, params)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "profileID", ctx.Param("profileID"), &profileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, profileID, configID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetBootIpxe)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeByLabels)
	router.GET(baseURL+"/profile/:profileID/config/:configID", wrapper.GetConfigByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NBlVR/uyqqrqvwAAAP//daVVVLoTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
