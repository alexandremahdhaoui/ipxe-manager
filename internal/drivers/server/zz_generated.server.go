// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// Labels defines model for labels.
type Labels = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetIpxeByLabelsParams defines parameters for GetIpxeByLabels.
type GetIpxeByLabelsParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetBootIpxe(ctx echo.Context) error
	// Retrieve an iPXE manifest by labels
	// (GET /ipxe)
	GetIpxeByLabels(ctx echo.Context, params GetIpxeByLabelsParams) error
	// Retrieve dynamically a configuration file by its profile and config ID
	// (GET /profile/{profileID}/config/{configID})
	GetConfigByID(ctx echo.Context, profileID UUID, configID UUID, params GetConfigByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBootIpxe converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootIpxe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBootIpxe(ctx)
	return err
}

// GetIpxeByLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeByLabels(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeByLabelsParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeByLabels(ctx, params)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileID" -------------
	var profileID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "profileID", ctx.Param("profileID"), &profileID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileID: %s", err))
	}

	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, profileID, configID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetBootIpxe)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeByLabels)
	router.GET(baseURL+"/profile/:profileID/config/:configID", wrapper.GetConfigByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bOhL+K1w2Twvr4kvSVkCw6zRpYWwvQdIUi1PnBLQ0tthKpEJSTlxD//1gSElW",
	"HCMJgvStT5bE4cw3w28u9JrGMi+kAGE0jda0YIrlYEDZt4zNILNPXNCIXpegVrRHBcuBRs1qj+o4hZyh",
	"GEsSbrgULDtVsgBlONRqjQGFOv7+Pvb+Yt6vy/o39N5e/nuP9qhZFahUG8XFglY9CrcsLzJocfwPVldh",
	"Y/Yby0q4Cmlvs9a/u9ZHHVtKq6pHFehCCu1wjcIQf2IpDAhjPSiKjMcMnQh+aCnwWwdJLBOg0SgMezQH",
	"rdkC1R+xhCi4LkGbHikyYBpInEL8k6xkqQgXRWkQzSZOewrmNKKvgk30A7eqgxOlpHJYE9Cx4gWCqc2c",
	"OTOobRT2n4e938V+IVhpUqn4L0ha8IWSS54AWbKMJwQFQJhas3NHv4A/49pwo3YuVV4/a5JzrblYEInx",
	"szicz8Pn+Tzs+vxeqhlPEhA9PCCSSCKkISlbAilAWctSECMJi2PQmpiUa6JAy1LF8AKOt/adS6PnuTTq",
	"uvQ1hYaCkLRYyQ3T1re5LEXyEkdGdAExn/OuEb5lY/95SbV/N6kmAisGy4gGtQRFADG1DDVqRdiCcUEy",
	"ZkC9gGsXAm4LiDF8fJdp59nweZ7dod85qCWPgZSCLRnP2CyD3+jXDms+qo2lmPPFljsGbk1QZIxbR55m",
	"uVa0y3Rp82deZtmKKDCKwxIS4jaUyuV6zgSfgzYWFD/9/8kLQLJqng4Ixbs42qDbHuEii03sTktzR7um",
	"rmrRiHJhhoNNI0MSLdwJtke/vteQsB9dl1xBQqPvTudG/rJVJmc/ILZV/+JicnyHZLQ/GMJo/+C1B2/e",
	"zrz+IBl6bLR/4I0GBwf9Uf/1KAyxT7Y4y5Inu/rthhBbOS9WZFYaJiDgC2HbO1blOJNl4nHBTSd0na5N",
	"l0xxJkxE5rHUU7EEhWU1In1/5IdTUTCtb5JoKggpNShtnwjxCE4XEYmlAveFEK3Tq02XuvoJq0ba7dA6",
	"9ZRmZDwej33fn4pd7jXU2nZu+/S7Lrz6Fy9uYSqmQoMh51/PTsafiDaYQ+7Tt5Oz88mXz2T41h+Eg1HY",
	"7w/8IXqHi+++fH4/+XBx9pGkxhQ6CoJasx/LvE4bny9Eo/9ofH7SlZ6VPEu0j5GQ2p9DIhUrlEQm+FIt",
	"gkLJJNBGAct1sLd28Kp6W7C3rsFVwe2bg6uDEZr5CUpARvbWta0qcGo9Z8TbbPIyvgTPyXtOAcHDVslh",
	"juWpRoVSvpLSzPVVqbLDJ2t2e3yn2ef5gjTk8udcaTOT0mw+FRkzSGCfJ4c5GJZtluo4OuNtyKupcGiJ",
	"5yGhiAX9ZHR2L8vvAMT4Iapd9MJExgGmqV0strULcsYzGtGcpUnKZMl9lsEtE4mC/y5wDZmwGajHzSL5",
	"1GygPVoqVNGQYsFNWs4sg1pdrfoA6eqxgtN7pe8rzjAcZxkg49MJmUtFWE3+c9vmkPoZj0FoW6kaTAWL",
	"UyADP7wH5ebmxmd22dKx3quDj5N3J5/PT7yBH/qpyTM7iHNjM8raG59OaI/WBQErmB/6IUrJAgSij+jQ",
	"D/0h7eHFIbXlNsDQ++gfvi3Axhfrse0ik4RG9AOYIynNBGW25vyBG0l29YxWru4aveZS8LAwCm2G8Mdk",
	"+53h9THZYWcqfEx21Jm3Hpbdd3j3n4IBhWwTLPOcqRWN6FndK1vKuKzDGTlOGReZZAm+TKml4H/c1fBw",
	"iTcxPaWYMGyhscXZE7xE7cFjh4kHebT62Nwyu1fT77td2IgE9eW0uvzDhN/LhKZzktmKtP8I7DjtQsk5",
	"zyBY1w+T46rugcHa/U6Oq4fo8M4KHa0mx/fJsD3K8+sSCE/w1jrnoIic28JXm8ZKZ//QwOqyKb8tMNqd",
	"yowq4alDuB3Oqqr3ZEB189qNp4nKC8D5ncnSzP9/0uWhdElWguU8ZnjzYFtXIGQdpg83uqEoYaK5KBHL",
	"gCaj6mhfVlVV/RMAAP//w9ZMkb0TAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
