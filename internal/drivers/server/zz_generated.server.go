// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// Labels defines model for labels.
type Labels = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetIpxeByLabelsParams defines parameters for GetIpxeByLabels.
type GetIpxeByLabelsParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetIPXEBootstrap(ctx echo.Context) error
	// Retrieve an iPXE manifest by labels
	// (GET /ipxe)
	GetIpxeByLabels(ctx echo.Context, params GetIpxeByLabelsParams) error
	// Retrieve dynamically a configuration file by its profile name and config ID.
	// (GET /profile/{profileName}/config/{configID})
	GetConfigByID(ctx echo.Context, profileName string, configID UUID, params GetConfigByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIPXEBootstrap converts echo context to params.
func (w *ServerInterfaceWrapper) GetIPXEBootstrap(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIPXEBootstrap(ctx)
	return err
}

// GetIpxeByLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeByLabels(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeByLabelsParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeByLabels(ctx, params)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileName" -------------
	var profileName string

	err = runtime.BindStyledParameterWithOptions("simple", "profileName", ctx.Param("profileName"), &profileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileName: %s", err))
	}

	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, profileName, configID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetIPXEBootstrap)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeByLabels)
	router.GET(baseURL+"/profile/:profileName/config/:configID", wrapper.GetConfigByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1TG/XK1Wq/8CAAD//292Rm2OEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
