// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BuildarchSelector.
const (
	BuildarchSelectorArm32 BuildarchSelector = "arm32"
	BuildarchSelectorArm64 BuildarchSelector = "arm64"
	BuildarchSelectorI386  BuildarchSelector = "i386"
	BuildarchSelectorX8664 BuildarchSelector = "x86_64"
)

// Defines values for GetIpxeBySelectorsParamsBuildarch.
const (
	GetIpxeBySelectorsParamsBuildarchArm32 GetIpxeBySelectorsParamsBuildarch = "arm32"
	GetIpxeBySelectorsParamsBuildarchArm64 GetIpxeBySelectorsParamsBuildarch = "arm64"
	GetIpxeBySelectorsParamsBuildarchI386  GetIpxeBySelectorsParamsBuildarch = "i386"
	GetIpxeBySelectorsParamsBuildarchX8664 GetIpxeBySelectorsParamsBuildarch = "x86_64"
)

// Defines values for GetConfigByIDParamsBuildarch.
const (
	Arm32 GetConfigByIDParamsBuildarch = "arm32"
	Arm64 GetConfigByIDParamsBuildarch = "arm64"
	I386  GetConfigByIDParamsBuildarch = "i386"
	X8664 GetConfigByIDParamsBuildarch = "x86_64"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// BuildarchSelector defines model for buildarchSelector.
type BuildarchSelector string

// UuidSelector defines model for uuidSelector.
type UuidSelector = UUID

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetIpxeBySelectorsParams defines parameters for GetIpxeBySelectors.
type GetIpxeBySelectorsParams struct {
	Uuid      UuidSelector                      `form:"uuid" json:"uuid"`
	Buildarch GetIpxeBySelectorsParamsBuildarch `form:"buildarch" json:"buildarch"`
}

// GetIpxeBySelectorsParamsBuildarch defines parameters for GetIpxeBySelectors.
type GetIpxeBySelectorsParamsBuildarch string

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Uuid      UuidSelector                 `form:"uuid" json:"uuid"`
	Buildarch GetConfigByIDParamsBuildarch `form:"buildarch" json:"buildarch"`
}

// GetConfigByIDParamsBuildarch defines parameters for GetConfigByID.
type GetConfigByIDParamsBuildarch string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetIPXEBootstrap(ctx echo.Context) error
	// Retrieve an iPXE manifest by selectors
	// (GET /ipxe)
	GetIpxeBySelectors(ctx echo.Context, params GetIpxeBySelectorsParams) error
	// Retrieve dynamically a configuration file by its profile name and config ID.
	// (GET /profile/{profileName}/config/{configID})
	GetConfigByID(ctx echo.Context, profileName string, configID UUID, params GetConfigByIDParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIPXEBootstrap converts echo context to params.
func (w *ServerInterfaceWrapper) GetIPXEBootstrap(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIPXEBootstrap(ctx)
	return err
}

// GetIpxeBySelectors converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeBySelectors(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeBySelectorsParams
	// ------------- Required query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Required query parameter "buildarch" -------------

	err = runtime.BindQueryParameter("form", true, true, "buildarch", ctx.QueryParams(), &params.Buildarch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildarch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeBySelectors(ctx, params)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "profileName" -------------
	var profileName string

	err = runtime.BindStyledParameterWithOptions("simple", "profileName", ctx.Param("profileName"), &profileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profileName: %s", err))
	}

	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Required query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Required query parameter "buildarch" -------------

	err = runtime.BindQueryParameter("form", true, true, "buildarch", ctx.QueryParams(), &params.Buildarch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildarch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, profileName, configID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetIPXEBootstrap)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeBySelectors)
	router.GET(baseURL+"/profile/:profileName/config/:configID", wrapper.GetConfigByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAAAP//AQmoIysUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
