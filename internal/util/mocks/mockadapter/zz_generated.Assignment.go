// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockadapter

import (
	context "context"

	types "github.com/alexandremahdhaoui/ipxer/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// MockAssignment is an autogenerated mock type for the Assignment type
type MockAssignment struct {
	mock.Mock
}

type MockAssignment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssignment) EXPECT() *MockAssignment_Expecter {
	return &MockAssignment_Expecter{mock: &_m.Mock}
}

// FindBySelectors provides a mock function with given fields: ctx, selectors
func (_m *MockAssignment) FindBySelectors(ctx context.Context, selectors types.IpxeSelectors) (types.Assignment, error) {
	ret := _m.Called(ctx, selectors)

	if len(ret) == 0 {
		panic("no return value specified for FindBySelectors")
	}

	var r0 types.Assignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.IpxeSelectors) (types.Assignment, error)); ok {
		return rf(ctx, selectors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.IpxeSelectors) types.Assignment); ok {
		r0 = rf(ctx, selectors)
	} else {
		r0 = ret.Get(0).(types.Assignment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.IpxeSelectors) error); ok {
		r1 = rf(ctx, selectors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssignment_FindBySelectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySelectors'
type MockAssignment_FindBySelectors_Call struct {
	*mock.Call
}

// FindBySelectors is a helper method to define mock.On call
//   - ctx context.Context
//   - selectors types.IpxeSelectors
func (_e *MockAssignment_Expecter) FindBySelectors(ctx interface{}, selectors interface{}) *MockAssignment_FindBySelectors_Call {
	return &MockAssignment_FindBySelectors_Call{Call: _e.mock.On("FindBySelectors", ctx, selectors)}
}

func (_c *MockAssignment_FindBySelectors_Call) Run(run func(ctx context.Context, selectors types.IpxeSelectors)) *MockAssignment_FindBySelectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.IpxeSelectors))
	})
	return _c
}

func (_c *MockAssignment_FindBySelectors_Call) Return(_a0 types.Assignment, _a1 error) *MockAssignment_FindBySelectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssignment_FindBySelectors_Call) RunAndReturn(run func(context.Context, types.IpxeSelectors) (types.Assignment, error)) *MockAssignment_FindBySelectors_Call {
	_c.Call.Return(run)
	return _c
}

// FindDefaultByBuildarch provides a mock function with given fields: ctx, buildarch
func (_m *MockAssignment) FindDefaultByBuildarch(ctx context.Context, buildarch string) (types.Assignment, error) {
	ret := _m.Called(ctx, buildarch)

	if len(ret) == 0 {
		panic("no return value specified for FindDefaultByBuildarch")
	}

	var r0 types.Assignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.Assignment, error)); ok {
		return rf(ctx, buildarch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Assignment); ok {
		r0 = rf(ctx, buildarch)
	} else {
		r0 = ret.Get(0).(types.Assignment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildarch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAssignment_FindDefaultByBuildarch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDefaultByBuildarch'
type MockAssignment_FindDefaultByBuildarch_Call struct {
	*mock.Call
}

// FindDefaultByBuildarch is a helper method to define mock.On call
//   - ctx context.Context
//   - buildarch string
func (_e *MockAssignment_Expecter) FindDefaultByBuildarch(ctx interface{}, buildarch interface{}) *MockAssignment_FindDefaultByBuildarch_Call {
	return &MockAssignment_FindDefaultByBuildarch_Call{Call: _e.mock.On("FindDefaultByBuildarch", ctx, buildarch)}
}

func (_c *MockAssignment_FindDefaultByBuildarch_Call) Run(run func(ctx context.Context, buildarch string)) *MockAssignment_FindDefaultByBuildarch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAssignment_FindDefaultByBuildarch_Call) Return(_a0 types.Assignment, _a1 error) *MockAssignment_FindDefaultByBuildarch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAssignment_FindDefaultByBuildarch_Call) RunAndReturn(run func(context.Context, string) (types.Assignment, error)) *MockAssignment_FindDefaultByBuildarch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssignment creates a new instance of MockAssignment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssignment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssignment {
	mock := &MockAssignment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
