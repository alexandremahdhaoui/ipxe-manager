// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockadapter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	jsonpath "k8s.io/client-go/util/jsonpath"

	types "github.com/alexandremahdhaoui/ipxer/internal/types"
)

// MockObjectRefResolver is an autogenerated mock type for the ObjectRefResolver type
type MockObjectRefResolver struct {
	mock.Mock
}

type MockObjectRefResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectRefResolver) EXPECT() *MockObjectRefResolver_Expecter {
	return &MockObjectRefResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: ctx, content, attributes
func (_m *MockObjectRefResolver) Resolve(ctx context.Context, content types.Content, attributes types.IPXESelectors) ([]byte, error) {
	ret := _m.Called(ctx, content, attributes)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Content, types.IPXESelectors) ([]byte, error)); ok {
		return rf(ctx, content, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Content, types.IPXESelectors) []byte); ok {
		r0 = rf(ctx, content, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Content, types.IPXESelectors) error); ok {
		r1 = rf(ctx, content, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectRefResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockObjectRefResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - content types.Content
//   - attributes types.IPXESelectors
func (_e *MockObjectRefResolver_Expecter) Resolve(ctx interface{}, content interface{}, attributes interface{}) *MockObjectRefResolver_Resolve_Call {
	return &MockObjectRefResolver_Resolve_Call{Call: _e.mock.On("Resolve", ctx, content, attributes)}
}

func (_c *MockObjectRefResolver_Resolve_Call) Run(run func(ctx context.Context, content types.Content, attributes types.IPXESelectors)) *MockObjectRefResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Content), args[2].(types.IPXESelectors))
	})
	return _c
}

func (_c *MockObjectRefResolver_Resolve_Call) Return(_a0 []byte, _a1 error) *MockObjectRefResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectRefResolver_Resolve_Call) RunAndReturn(run func(context.Context, types.Content, types.IPXESelectors) ([]byte, error)) *MockObjectRefResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// ResolvePaths provides a mock function with given fields: ctx, paths, ref
func (_m *MockObjectRefResolver) ResolvePaths(ctx context.Context, paths []*jsonpath.JSONPath, ref types.ObjectRef) ([][]byte, error) {
	ret := _m.Called(ctx, paths, ref)

	if len(ret) == 0 {
		panic("no return value specified for ResolvePaths")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*jsonpath.JSONPath, types.ObjectRef) ([][]byte, error)); ok {
		return rf(ctx, paths, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*jsonpath.JSONPath, types.ObjectRef) [][]byte); ok {
		r0 = rf(ctx, paths, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*jsonpath.JSONPath, types.ObjectRef) error); ok {
		r1 = rf(ctx, paths, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectRefResolver_ResolvePaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolvePaths'
type MockObjectRefResolver_ResolvePaths_Call struct {
	*mock.Call
}

// ResolvePaths is a helper method to define mock.On call
//   - ctx context.Context
//   - paths []*jsonpath.JSONPath
//   - ref types.ObjectRef
func (_e *MockObjectRefResolver_Expecter) ResolvePaths(ctx interface{}, paths interface{}, ref interface{}) *MockObjectRefResolver_ResolvePaths_Call {
	return &MockObjectRefResolver_ResolvePaths_Call{Call: _e.mock.On("ResolvePaths", ctx, paths, ref)}
}

func (_c *MockObjectRefResolver_ResolvePaths_Call) Run(run func(ctx context.Context, paths []*jsonpath.JSONPath, ref types.ObjectRef)) *MockObjectRefResolver_ResolvePaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*jsonpath.JSONPath), args[2].(types.ObjectRef))
	})
	return _c
}

func (_c *MockObjectRefResolver_ResolvePaths_Call) Return(_a0 [][]byte, _a1 error) *MockObjectRefResolver_ResolvePaths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectRefResolver_ResolvePaths_Call) RunAndReturn(run func(context.Context, []*jsonpath.JSONPath, types.ObjectRef) ([][]byte, error)) *MockObjectRefResolver_ResolvePaths_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectRefResolver creates a new instance of MockObjectRefResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectRefResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectRefResolver {
	mock := &MockObjectRefResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
