// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockadapter

import (
	context "context"

	types "github.com/alexandremahdhaoui/ipxer/internal/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockProfile is an autogenerated mock type for the Profile type
type MockProfile struct {
	mock.Mock
}

type MockProfile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfile) EXPECT() *MockProfile_Expecter {
	return &MockProfile_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockProfile) Get(ctx context.Context, name string) (types.Profile, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 types.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.Profile, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Profile); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(types.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProfile_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProfile_Expecter) Get(ctx interface{}, name interface{}) *MockProfile_Get_Call {
	return &MockProfile_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockProfile_Get_Call) Run(run func(ctx context.Context, name string)) *MockProfile_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProfile_Get_Call) Return(_a0 types.Profile, _a1 error) *MockProfile_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_Get_Call) RunAndReturn(run func(context.Context, string) (types.Profile, error)) *MockProfile_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListByContentID provides a mock function with given fields: ctx, configID
func (_m *MockProfile) ListByContentID(ctx context.Context, configID uuid.UUID) ([]types.Profile, error) {
	ret := _m.Called(ctx, configID)

	if len(ret) == 0 {
		panic("no return value specified for ListByContentID")
	}

	var r0 []types.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.Profile, error)); ok {
		return rf(ctx, configID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.Profile); ok {
		r0 = rf(ctx, configID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, configID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_ListByContentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByContentID'
type MockProfile_ListByContentID_Call struct {
	*mock.Call
}

// ListByContentID is a helper method to define mock.On call
//   - ctx context.Context
//   - configID uuid.UUID
func (_e *MockProfile_Expecter) ListByContentID(ctx interface{}, configID interface{}) *MockProfile_ListByContentID_Call {
	return &MockProfile_ListByContentID_Call{Call: _e.mock.On("ListByContentID", ctx, configID)}
}

func (_c *MockProfile_ListByContentID_Call) Run(run func(ctx context.Context, configID uuid.UUID)) *MockProfile_ListByContentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProfile_ListByContentID_Call) Return(_a0 []types.Profile, _a1 error) *MockProfile_ListByContentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_ListByContentID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]types.Profile, error)) *MockProfile_ListByContentID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfile creates a new instance of MockProfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfile {
	mock := &MockProfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
