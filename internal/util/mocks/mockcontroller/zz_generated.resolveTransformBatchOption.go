// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockcontroller

import mock "github.com/stretchr/testify/mock"

// MockresolveTransformBatchOption is an autogenerated mock type for the resolveTransformBatchOption type
type MockresolveTransformBatchOption struct {
	mock.Mock
}

type MockresolveTransformBatchOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockresolveTransformBatchOption) EXPECT() *MockresolveTransformBatchOption_Expecter {
	return &MockresolveTransformBatchOption_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: options
func (_m *MockresolveTransformBatchOption) Execute(options *controller.resolveTransformBatchOptions) {
	_m.Called(options)
}

// MockresolveTransformBatchOption_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockresolveTransformBatchOption_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - options *controller.resolveTransformBatchOptions
func (_e *MockresolveTransformBatchOption_Expecter) Execute(options interface{}) *MockresolveTransformBatchOption_Execute_Call {
	return &MockresolveTransformBatchOption_Execute_Call{Call: _e.mock.On("Execute", options)}
}

func (_c *MockresolveTransformBatchOption_Execute_Call) Run(run func(options *controller.resolveTransformBatchOptions)) *MockresolveTransformBatchOption_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*controller.resolveTransformBatchOptions))
	})
	return _c
}

func (_c *MockresolveTransformBatchOption_Execute_Call) Return() *MockresolveTransformBatchOption_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockresolveTransformBatchOption_Execute_Call) RunAndReturn(run func(*controller.resolveTransformBatchOptions)) *MockresolveTransformBatchOption_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockresolveTransformBatchOption creates a new instance of MockresolveTransformBatchOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockresolveTransformBatchOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockresolveTransformBatchOption {
	mock := &MockresolveTransformBatchOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
