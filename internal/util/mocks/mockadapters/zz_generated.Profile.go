// Code generated by mockery v2.42.0. DO NOT EDIT.

package mockadapters

import (
	context "context"

	types "github.com/alexandremahdhaoui/ipxer/internal/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockProfile is an autogenerated mock type for the Profile type
type MockProfile struct {
	mock.Mock
}

type MockProfile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfile) EXPECT() *MockProfile_Expecter {
	return &MockProfile_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockProfile) Get(ctx context.Context, id uuid.UUID) (types.Profile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 types.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.Profile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(types.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProfile_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockProfile_Expecter) FindByID(ctx interface{}, id interface{}) *MockProfile_FindByID_Call {
	return &MockProfile_FindByID_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockProfile_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProfile_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProfile_FindByID_Call) Return(_a0 types.Profile, _a1 error) *MockProfile_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (types.Profile, error)) *MockProfile_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindBySelectors provides a mock function with given fields: ctx, selectors
func (_m *MockProfile) FindBySelectors(ctx context.Context, selectors types.IpxeSelectors) (types.Profile, error) {
	ret := _m.Called(ctx, selectors)

	if len(ret) == 0 {
		panic("no return value specified for FindBySelectors")
	}

	var r0 types.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.IpxeSelectors) (types.Profile, error)); ok {
		return rf(ctx, selectors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.IpxeSelectors) types.Profile); ok {
		r0 = rf(ctx, selectors)
	} else {
		r0 = ret.Get(0).(types.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.IpxeSelectors) error); ok {
		r1 = rf(ctx, selectors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProfile_FindBySelectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySelectors'
type MockProfile_FindBySelectors_Call struct {
	*mock.Call
}

// FindBySelectors is a helper method to define mock.On call
//   - ctx context.Context
//   - selectors types.IpxeSelectors
func (_e *MockProfile_Expecter) FindBySelectors(ctx interface{}, selectors interface{}) *MockProfile_FindBySelectors_Call {
	return &MockProfile_FindBySelectors_Call{Call: _e.mock.On("FindBySelectors", ctx, selectors)}
}

func (_c *MockProfile_FindBySelectors_Call) Run(run func(ctx context.Context, selectors types.IpxeSelectors)) *MockProfile_FindBySelectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.IpxeSelectors))
	})
	return _c
}

func (_c *MockProfile_FindBySelectors_Call) Return(_a0 types.Profile, _a1 error) *MockProfile_FindBySelectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProfile_FindBySelectors_Call) RunAndReturn(run func(context.Context, types.IpxeSelectors) (types.Profile, error)) *MockProfile_FindBySelectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProfile creates a new instance of MockProfile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfile {
	mock := &MockProfile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
