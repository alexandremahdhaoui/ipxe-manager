// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Config Any butane/ignition or cloud-init manifest.
type Config = string

// IPXE An iPXE manifest.
type IPXE = string

// Labels defines model for labels.
type Labels = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetConfigByIDParams defines parameters for GetConfigByID.
type GetConfigByIDParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// GetIpxeByLabelsParams defines parameters for GetIpxeByLabels.
type GetIpxeByLabelsParams struct {
	Labels *Labels `form:"labels,omitempty" json:"labels,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetBootIpxe(ctx echo.Context) error
	// Retrieve dynamically a configuration file by ID
	// (GET /config/{configID})
	GetConfigByID(ctx echo.Context, configID UUID, params GetConfigByIDParams) error
	// Retrieve an iPXE manifest by labels
	// (GET /ipxe)
	GetIpxeByLabels(ctx echo.Context, params GetIpxeByLabelsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBootIpxe converts echo context to params.
func (w *ServerInterfaceWrapper) GetBootIpxe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBootIpxe(ctx)
	return err
}

// GetConfigByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfigByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "configID" -------------
	var configID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "configID", ctx.Param("configID"), &configID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConfigByIDParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfigByID(ctx, configID, params)
	return err
}

// GetIpxeByLabels converts echo context to params.
func (w *ServerInterfaceWrapper) GetIpxeByLabels(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIpxeByLabelsParams
	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIpxeByLabels(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetBootIpxe)
	router.GET(baseURL+"/config/:configID", wrapper.GetConfigByID)
	router.GET(baseURL+"/ipxe", wrapper.GetIpxeByLabels)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
