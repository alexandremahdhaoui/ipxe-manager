// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BuildarchSelector.
const (
	BuildarchSelectorArm32 BuildarchSelector = "arm32"
	BuildarchSelectorArm64 BuildarchSelector = "arm64"
	BuildarchSelectorI386  BuildarchSelector = "i386"
	BuildarchSelectorX8664 BuildarchSelector = "x86_64"
)

// Defines values for GetContentByIDParamsBuildarch.
const (
	GetContentByIDParamsBuildarchArm32 GetContentByIDParamsBuildarch = "arm32"
	GetContentByIDParamsBuildarchArm64 GetContentByIDParamsBuildarch = "arm64"
	GetContentByIDParamsBuildarchI386  GetContentByIDParamsBuildarch = "i386"
	GetContentByIDParamsBuildarchX8664 GetContentByIDParamsBuildarch = "x86_64"
)

// Defines values for GetIPXEBySelectorsParamsBuildarch.
const (
	Arm32 GetIPXEBySelectorsParamsBuildarch = "arm32"
	Arm64 GetIPXEBySelectorsParamsBuildarch = "arm64"
	I386  GetIPXEBySelectorsParamsBuildarch = "i386"
	X8664 GetIPXEBySelectorsParamsBuildarch = "x86_64"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// Content Any content, e.g. a butane/ignition or cloud-init manifest.
type Content = string

// IPXE An iPXE manifest.
type IPXE = string

// BuildarchSelector defines model for buildarchSelector.
type BuildarchSelector string

// UuidSelector defines model for uuidSelector.
type UuidSelector = UUID

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// GetContentByIDParams defines parameters for GetContentByID.
type GetContentByIDParams struct {
	Uuid      UuidSelector                  `form:"uuid" json:"uuid"`
	Buildarch GetContentByIDParamsBuildarch `form:"buildarch" json:"buildarch"`
}

// GetContentByIDParamsBuildarch defines parameters for GetContentByID.
type GetContentByIDParamsBuildarch string

// GetIPXEBySelectorsParams defines parameters for GetIPXEBySelectors.
type GetIPXEBySelectorsParams struct {
	Uuid      UuidSelector                      `form:"uuid" json:"uuid"`
	Buildarch GetIPXEBySelectorsParamsBuildarch `form:"buildarch" json:"buildarch"`
}

// GetIPXEBySelectorsParamsBuildarch defines parameters for GetIPXEBySelectors.
type GetIPXEBySelectorsParamsBuildarch string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve an iPXE config to chainload to "/ipxe?labels=values"
	// (GET /boot.ipxe)
	GetIPXEBootstrap(ctx echo.Context) error
	// Retrieve dynamically a content by its ID.
	// (GET /content/{contentID})
	GetContentByID(ctx echo.Context, contentID UUID, params GetContentByIDParams) error
	// Retrieve an iPXE manifest by selectors
	// (GET /ipxe)
	GetIPXEBySelectors(ctx echo.Context, params GetIPXEBySelectorsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIPXEBootstrap converts echo context to params.
func (w *ServerInterfaceWrapper) GetIPXEBootstrap(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIPXEBootstrap(ctx)
	return err
}

// GetContentByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetContentByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contentID" -------------
	var contentID UUID

	err = runtime.BindStyledParameterWithOptions("simple", "contentID", ctx.Param("contentID"), &contentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contentID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContentByIDParams
	// ------------- Required query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Required query parameter "buildarch" -------------

	err = runtime.BindQueryParameter("form", true, true, "buildarch", ctx.QueryParams(), &params.Buildarch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildarch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContentByID(ctx, contentID, params)
	return err
}

// GetIPXEBySelectors converts echo context to params.
func (w *ServerInterfaceWrapper) GetIPXEBySelectors(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIPXEBySelectorsParams
	// ------------- Required query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Required query parameter "buildarch" -------------

	err = runtime.BindQueryParameter("form", true, true, "buildarch", ctx.QueryParams(), &params.Buildarch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildarch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIPXEBySelectors(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/boot.ipxe", wrapper.GetIPXEBootstrap)
	router.GET(baseURL+"/content/:contentID", wrapper.GetContentByID)
	router.GET(baseURL+"/ipxe", wrapper.GetIPXEBySelectors)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
