// Package transformerserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package transformerserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// TransformRequest defines model for TransformRequest.
type TransformRequest struct {
	Content string `json:"content"`
}

// AnyPath defines model for anyPath.
type AnyPath = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// TransformResponse defines model for TransformResponse.
type TransformResponse struct {
	Data *string `json:"data,omitempty"`
}

// ResolveJSONRequestBody defines body for Resolve for application/json ContentType.
type ResolveJSONRequestBody = TransformRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Perform a transformation
	// (POST /transform/{anyPath})
	Resolve(ctx echo.Context, anyPath AnyPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Resolve converts echo context to params.
func (w *ServerInterfaceWrapper) Resolve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "anyPath" -------------
	var anyPath AnyPath

	err = runtime.BindStyledParameterWithOptions("simple", "anyPath", ctx.Param("anyPath"), &anyPath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter anyPath: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Resolve(ctx, anyPath)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/transform/:anyPath", wrapper.Resolve)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/jNhD9K8R0T4UiKbFzqG7ZIgUCtEWQTdCigQvQ0tjirkRyScqJ19B/L4aUZDkW",
	"NqmRPUm2hjPvzccb7iBXtVYSpbOQ7UBzw2t0aPwvLre33JX0WqDNjdBOKAkZPEjxtUEmCpROrAQaplbM",
	"lci0UStRYQwRCDLUdDwCyWuEbPAXgcGvjTBYQOZMgxHYvMSaBwTOoaGz/z5enf3Dz74tumd69svi5w8Q",
	"gdtq8madEXINbduSP6uVtOhhz9OUHrmSDqXzRLSuRM4JffLZEoUd4DOvdYXBskDI5mkaQY3W8jW5/8gL",
	"RjDRuojpCrlFlpeYf2Fb1RgmpG4ctGPoHwyuIIOfkn1Ok/DVJtfGKBOwHqaSwtyFMORtnp6fhv18jP1B",
	"8saVyohvWAzgtVEbUSDb8EoUjAyoesFzoGPfgc9VF7h3u1Km7t4tq4W1Qq6Zovx5HIHz7DTOszHn35RZ",
	"iqJAGVGBWKGYVI6VfINMo/GRlWROMZ7naC1zpbDMoFWNyfEdiA/xA6X5aZTmY0r3JfYtiMWAlT1x67mt",
	"VCOL9ygZsxpzmuNREPEixuVpQ3V5OFQ3koabV8yi2aBhSJiGDnVmy/iaC8kq7tC8A7UHic8ac0qfmAod",
	"mM1OY3bQfp/QbESOrJF8w0XFlxX+QF4T0WJye2+4tDRyd50gvoHZSHuN0micCDJacOf/fSm3gwCr5WfM",
	"3RQ8WgVD4l2PifUq7Z10HClCoHkEIOR5B0FCIAMh3exivwCoouuQzqEOU3D3y+Yx+NzbL47IHOQwyPIE",
	"sCGhr0ULhovJnJE49u547t11i/KqwmcuC4PsD14WJVeNgAgaU0EGpXPaZkmyFq5slnGu6oT35nVvnQj9",
	"HDJzWJh7Ej1h/a6+ur3pB79bAivSZerymjaDXDPO/sJlqdQXNiQFDS33SuTYdVcPWfO8RHYRp0dIn56e",
	"Yu4/x8qsk+6sTX6/+fX6z0/XZxdxGpeurgiuE67yQnH79/XdVHSIYIPGBjrncRqndExplFwLyGAWp/EM",
	"In/z8MVKhv5Ldt0FpPUlVaG0VFhP/6aADO7QqmqD3sH+KvQ4PaZ7k6S/2rSL0AFo3UdVbP/X+H1PCY6a",
	"cmLqaF2Mh80bsiXBeHlFughqPhVxsEuOxcRvtjecJKP9ZeY12/PRJeA129lou75mOx/tre/bXga8l2/B",
	"QEZev5q65mYLGdyi8Rnn++z7EpNS8TW1DwwfYNG2bftfAAAA//9297npdwsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
