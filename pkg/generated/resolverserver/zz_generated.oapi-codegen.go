//go:build go1.22

// Package resolverserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package resolverserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Buildarch.
const (
	Arm32 Buildarch = "arm32"
	Arm64 Buildarch = "arm64"
	I386  Buildarch = "i386"
	X8664 Buildarch = "x86_64"
)

// Buildarch defines model for Buildarch.
type Buildarch string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// AnyRoutes defines model for anyRoutes.
type AnyRoutes = string

// BuildarchSelector defines model for buildarchSelector.
type BuildarchSelector = Buildarch

// UuidSelector defines model for uuidSelector.
type UuidSelector = UUID

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// ResolveResp defines model for ResolveResp.
type ResolveResp struct {
	Data *string `json:"data,omitempty"`
}

// ResolveParams defines parameters for Resolve.
type ResolveParams struct {
	Uuid      UuidSelector      `form:"uuid" json:"uuid"`
	Buildarch BuildarchSelector `form:"buildarch" json:"buildarch"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resolve a config
	// (GET /{anyRoutes})
	Resolve(w http.ResponseWriter, r *http.Request, anyRoutes AnyRoutes, params ResolveParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Resolve operation middleware
func (siw *ServerInterfaceWrapper) Resolve(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "anyRoutes" -------------
	var anyRoutes AnyRoutes

	err = runtime.BindStyledParameterWithOptions("simple", "anyRoutes", r.PathValue("anyRoutes"), &anyRoutes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "anyRoutes", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ResolveParams

	// ------------- Required query parameter "uuid" -------------

	if paramValue := r.URL.Query().Get("uuid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "uuid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "uuid", r.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	// ------------- Required query parameter "buildarch" -------------

	if paramValue := r.URL.Query().Get("buildarch"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "buildarch"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "buildarch", r.URL.Query(), &params.Buildarch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "buildarch", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Resolve(w, r, anyRoutes, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/{anyRoutes}", wrapper.Resolve)

	return m
}

type N400JSONResponse Error

type N401JSONResponse Error

type N403JSONResponse Error

type N404JSONResponse Error

type N500JSONResponse Error

type N503JSONResponse Error

type ResolveRespJSONResponse struct {
	Data *string `json:"data,omitempty"`
}

type ResolveRequestObject struct {
	AnyRoutes AnyRoutes `json:"anyRoutes"`
	Params    ResolveParams
}

type ResolveResponseObject interface {
	VisitResolveResponse(w http.ResponseWriter) error
}

type Resolve200JSONResponse struct{ ResolveRespJSONResponse }

func (response Resolve200JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Resolve400JSONResponse struct{ N400JSONResponse }

func (response Resolve400JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Resolve401JSONResponse struct{ N401JSONResponse }

func (response Resolve401JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Resolve403JSONResponse struct{ N403JSONResponse }

func (response Resolve403JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Resolve404JSONResponse struct{ N404JSONResponse }

func (response Resolve404JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Resolve500JSONResponse struct{ N500JSONResponse }

func (response Resolve500JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Resolve503JSONResponse struct{ N503JSONResponse }

func (response Resolve503JSONResponse) VisitResolveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resolve a config
	// (GET /{anyRoutes})
	Resolve(ctx context.Context, request ResolveRequestObject) (ResolveResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Resolve operation middleware
func (sh *strictHandler) Resolve(w http.ResponseWriter, r *http.Request, anyRoutes AnyRoutes, params ResolveParams) {
	var request ResolveRequestObject

	request.AnyRoutes = anyRoutes
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Resolve(ctx, request.(ResolveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Resolve")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ResolveResponseObject); ok {
		if err := validResponse.VisitResolveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWUW/bNhD+K8StT4MsybbspnpLtwwwsA1F0mDDAm+gpbPEViIZknLiBvrvA0nZUmKj",
	"MYz0SZb18e777o539wSZqKXgyI2G9AkkVbRGg8q9Ub69Fo1B95KjzhSThgkOKdxydt8gYTlyw9YMFRFr",
	"YkokUok1qzCEAJgFSmpKCIDTGiEdWAxA4X3DFOaQGtVgADorsaaehTGo7Ol/7y5H/9DRt2X3jEcflj+/",
	"gwDMVlp72ijGC2jbAFYNq3KqsvIGK8yMUNaSo3DfoNr2HPbA73J4p3ANKfwU9QGK/FcdfdxbsI6bhuWv",
	"+bSYs93d3i5+hda6Uqil4NonJIlj+8gEN8iNy5eUFcuoTVH0Rds8PQE+0lpW6JE5QprEcQA1ak0Ly+wj",
	"zYmlhdoERFZINZKsxOwr2YpGEcZlY6A9leqVUkJ5rs/rxbq59m6stSQen8d9POR+y2ljSqHYN8z35KUS",
	"G5Yj2dCK5cQCbIl6y16OfgM9l53jndm1UHX3W5Oaac14QYSNn+PhNU/P0zwdav5NqBXLc+SBTRDJBeHC",
	"kJJukEhUzrPgxAhCswy1JqZkmijUolEZvoHwvX8vKTlPUjKU9LnEXQlivudKHqh22tai4flbpIxoiZlt",
	"VgMn7IWP2XmXavb8Ui247V+0IhrVBhVBy2lfoUZtCS0o46SiBtUbSLvl+Cgxs+Fjx1x7ZdPzlD0rvxtU",
	"G5YhaTjdUFbRVYU/UNcRb6E1e41aVBu8Ri1P0DQYLEpIVIZ1E40a9+/hLOn+EasvmJljxOyk24d815XJ",
	"WonaDUHl+RHkuRSMG2e0U2s99gPEhpw3NaR3wKYXcwjg8WL+3zyBAKiqpxP/nCewPJh5Afi4HejyiXsC",
	"35MgBcaNs9QZsCVS+PzsE3ssCv20uvM2e/zyIEYBuDE1LCEYT6aYzObvR3jxYTUaT/LpiCaz+SiZzOfj",
	"ZPw+ieMYgp5nNyVfMmntKrEWu0zTzGW6m6yXFT5Sniskf9AyL6loGATQqApSKI2ROo2igpmyWYWZqCO6",
	"g9c7dMTkow/G8xR/to2TaZfPy0+LXfPoBsna9nYrs7bThReEkr9wVQrxlXTFqewKVLEMucYhX0mzEskk",
	"jA9oPjw8hNR9DoUqou6sjn5f/HL1583VaBLGYWnqynI1zLgQLz79fXV94BoC2KDSXsg4jMPYnhESOZUM",
	"UpiGcTiFwC1nrmSip/1m1tr3Al2MbVU5vYsc0t2tc+f6NfHu+N3uIVG/9LXBq+Bn29QJ+MO1r12+WJQm",
	"vqcfM7THRcOW4ibbCWcsqF9mXsOOB0vAa9jpYLq+hk0Gc+v72JnnOzuFgwW5rtXUNVXbPv2EkkzwNSvs",
	"TaWFrQDo+h0s27Zt/w8AAP//Box+0FQMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
