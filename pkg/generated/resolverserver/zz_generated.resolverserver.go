// Package resolverserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package resolverserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Buildarch.
const (
	Arm32 Buildarch = "arm32"
	Arm64 Buildarch = "arm64"
	I386  Buildarch = "i386"
	X8664 Buildarch = "x86_64"
)

// Buildarch defines model for Buildarch.
type Buildarch string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// AnyRoutes defines model for anyRoutes.
type AnyRoutes = string

// BuildarchSelector defines model for buildarchSelector.
type BuildarchSelector = Buildarch

// UuidSelector defines model for uuidSelector.
type UuidSelector = UUID

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// ResolveResponse defines model for ResolveResponse.
type ResolveResponse struct {
	Data *string `json:"data,omitempty"`
}

// ResolveParams defines parameters for Resolve.
type ResolveParams struct {
	Uuid      UuidSelector      `form:"uuid" json:"uuid"`
	Buildarch BuildarchSelector `form:"buildarch" json:"buildarch"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resolve a config
	// (GET /{anyRoutes})
	Resolve(ctx echo.Context, anyRoutes AnyRoutes, params ResolveParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Resolve converts echo context to params.
func (w *ServerInterfaceWrapper) Resolve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "anyRoutes" -------------
	var anyRoutes AnyRoutes

	err = runtime.BindStyledParameterWithOptions("simple", "anyRoutes", ctx.Param("anyRoutes"), &anyRoutes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter anyRoutes: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ResolveParams
	// ------------- Required query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Required query parameter "buildarch" -------------

	err = runtime.BindQueryParameter("form", true, true, "buildarch", ctx.QueryParams(), &params.Buildarch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildarch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Resolve(ctx, anyRoutes, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/:anyRoutes", wrapper.Resolve)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWYW/bNhP+K8S9/fRClmRbdlt9S7cMMLANRdJgwwJvoKmzxFYiGZJy4gb67wNJ2XJi",
	"owmM7JMs6+Hd89wd7+4RmGyUFCisgfwRFNW0QYvav1GxvZKtRf9SoGGaK8ulgBxuBL9rkfACheVrjprI",
	"NbEVEqXlmtcYQwTcARW1FUQgaIOQH1iMQONdyzUWkFvdYgSGVdjQwMJa1O7037cXo7/o6Puyf6ajj8v/",
	"v4MI7FY5e8ZqLkroughWLa8Lqll1jTUyK7Wz5Cnctai3A4c98Icc3mlcQw7/S4YAJeGrST7tLTjHbcuL",
	"l3w6zNnubm4WP0PnXGk0SgoTEpKlqXswKSwK6/OlVM0ZdSlKvhqXp0fAB9qoGgOyQMizNI2gQWNo6Zh9",
	"ogVxtNDYiKgaqUHCKmTfyFa2mnChWgvda6leai114Pq0Xpybq+DGWcvS8Xncx4fcbwRtbSU1/47FnrzS",
	"csMLJBta84I4gCvRYDnIMW+g56J3vDO7lrrpfxvScGO4KIl08fM8gubpeZqnh5p/kXrFiwJF5BJECkmE",
	"tKSiGyQKtfcsBbGSUMbQGGIrbohGI1vN8A2E7/0HSdl5krJDSV8q3JUgFnuu5J4ar20tW1G8RcqIUchc",
	"szpwwp/5mJ13qWZPL9VCuP5Fa2JQb1ATdJz2FWr1ltCSckFqalG/gbQbgQ8KmQsfP+U6KJuep+xJ+V2j",
	"3nCGpBV0Q3lNVzX+h7pOeIud2Ss0st7gVd8OX6HrYLhoqVBb3k81av2/x/Ok/0euviKzp8i5abcP+64z",
	"k7WWjR+EOnAkKAolubDeaK/YeRyGiAu7aBvIb4FPP8whgocP83/mGURAdTOdhOc8g+XR3IsgxO5IV0je",
	"I4S+BDlwYb2l3oArkzLkaJ/cU1EYJtZtsDngl0cxisCPqsMygvFkitls/n6EHz6uRuNJMR3RbDYfZZP5",
	"fJyN32dpmkI08Own5XMmnVsn1nKXacp8pvvpelHjAxWFRvIbrYqKypZDBK2uIYfKWmXyJCm5rdpVzGST",
	"0B282aETrh5CMJ6m+Itrntz4fF58XuwaSD9M1q6/O5mNmzCiJJT8gatKym+kL1Dt1qCaM+yLdMdXUVYh",
	"mcTpEc37+/uY+s+x1GXSnzXJr4ufLn+/vhxN4jSubFM7rpZbH+LF5z8vr45cQwQb1CYIGcdpnLozUqGg",
	"ikMO0ziNpxD5Bc2XTPK43846916ij7GrKq93UUC+u3n+3LAq3p6+3wMkGRa/LnoR/GSjegX+ePXrls+W",
	"pUno66cM7XHJ87biJ9wrzjnQsNS8hB0fLAMvYacHU/YlbHYwv36MnQW+s9dwcCDfudqmoXo7lAChhEmx",
	"5qW7rbR0VQB9z4Nl13XdvwEAAP//7K1NslwMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
