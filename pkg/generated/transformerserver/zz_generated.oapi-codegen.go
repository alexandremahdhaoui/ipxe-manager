//go:build go1.22

// Package transformerserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package transformerserver

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Buildarch.
const (
	Arm32 Buildarch = "arm32"
	Arm64 Buildarch = "arm64"
	I386  Buildarch = "i386"
	X8664 Buildarch = "x86_64"
)

// Buildarch defines model for Buildarch.
type Buildarch string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// TransformRequest defines model for TransformRequest.
type TransformRequest struct {
	Attributes *struct {
		Buildarch Buildarch `json:"buildarch"`
		Uuid      UUID      `json:"uuid"`
	} `json:"attributes,omitempty"`
	Content *string `json:"content,omitempty"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// AnyRoutes defines model for anyRoutes.
type AnyRoutes = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// TransformResp defines model for TransformResp.
type TransformResp struct {
	Data *string `json:"data,omitempty"`
}

// TransformJSONRequestBody defines body for Transform for application/json ContentType.
type TransformJSONRequestBody = TransformRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Perform a transformation
	// (POST /{anyRoutes})
	Transform(w http.ResponseWriter, r *http.Request, anyRoutes AnyRoutes)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Transform operation middleware
func (siw *ServerInterfaceWrapper) Transform(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "anyRoutes" -------------
	var anyRoutes AnyRoutes

	err = runtime.BindStyledParameterWithOptions("simple", "anyRoutes", r.PathValue("anyRoutes"), &anyRoutes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "anyRoutes", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Transform(w, r, anyRoutes)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/{anyRoutes}", wrapper.Transform)

	return m
}

type N400JSONResponse Error

type N401JSONResponse Error

type N403JSONResponse Error

type N404JSONResponse Error

type N500JSONResponse Error

type N503JSONResponse Error

type TransformRespJSONResponse struct {
	Data *string `json:"data,omitempty"`
}

type TransformRequestObject struct {
	AnyRoutes AnyRoutes `json:"anyRoutes"`
	Body      *TransformJSONRequestBody
}

type TransformResponseObject interface {
	VisitTransformResponse(w http.ResponseWriter) error
}

type Transform200JSONResponse struct{ TransformRespJSONResponse }

func (response Transform200JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Transform400JSONResponse struct{ N400JSONResponse }

func (response Transform400JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Transform401JSONResponse struct{ N401JSONResponse }

func (response Transform401JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Transform403JSONResponse struct{ N403JSONResponse }

func (response Transform403JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Transform404JSONResponse struct{ N404JSONResponse }

func (response Transform404JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Transform500JSONResponse struct{ N500JSONResponse }

func (response Transform500JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Transform503JSONResponse struct{ N503JSONResponse }

func (response Transform503JSONResponse) VisitTransformResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Perform a transformation
	// (POST /{anyRoutes})
	Transform(ctx context.Context, request TransformRequestObject) (TransformResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Transform operation middleware
func (sh *strictHandler) Transform(w http.ResponseWriter, r *http.Request, anyRoutes AnyRoutes) {
	var request TransformRequestObject

	request.AnyRoutes = anyRoutes

	var body TransformJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Transform(ctx, request.(TransformRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Transform")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransformResponseObject); ok {
		if err := validResponse.VisitTransformResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW227jNhD9FWK6T4UsybbszeotaVPAQFsE2QQtGrjFWBpb3JVILkk58Qb+94KkL3Js",
	"JGmQPikOhzPnDM9cHqGQjZKChDWQP4JCjQ1Z0v4XitW1bC35HyWZQnNluRSQw63g31pivCRh+ZyTZnLO",
	"bEVMaTnnNcUQAXeGCm0FEQhsCPKOxwg0fWu5phJyq1uKwBQVNRhQWEva3f777rz3F/a+TzfftPdp+uMH",
	"iMCulPNnrOZiAev12vkzSgoT0GZp6j6FFJaE9WSUqnmBDn/yxTgSj0AP2KiagmVJkGdpGkFDxuDCub/A",
	"kjmYZGzEVE1oiBUVFV/ZSraacaFaC+su9A+a5pDDD8k+r0k4Ncml1lIHrIfJdGGuQxjnLUv7b8Pe72K/",
	"FdjaSmr+ncodeKXlkpfElljzkjkD937Bc6Bj3oHP+Sbw1u1c6mbzt2ENN4aLBZMufx5H4Dx8G+dhl/Mv",
	"Us94WZKI3AOxUjIhLatwSUyR9pGlYFYyLAoyhtmKG6bJyFYX9A7Ed/EDpextlLIupZuKthKkcoeV3aPx",
	"3OayFeV7PBkzigpXyZ0g/EmM0duKanRYVBPhihtrZkgvSTNymHYKtXrFcIFcsBot6XegdivoQVHh0sdP",
	"hQ7Mhm9jdiC/z6SXvCDWClwir3FW0//I60S02Lm90SiMK7lrMuoVrDp9V0tF2vJNw0fr//u01e6ar5x9",
	"ocKeguYGwS7pdouHbTu0d7Lh5yJctLwuUReVT7JoG8jvgA/PxhDBw9n4n3EGEaBuhoPwHWcwPRoBEYRM",
	"HfEIT/UIoQtBDlxY72njwIliEV5k95SnWO/n1V3wubefHuXk4BlCZz8ChtZqPtvO18OzWTclz8ljn7t1",
	"BG3Ly5cu3N5Ofj7i4y9GnainGHV09KImIvBxukUD/cGQstH4Y4/OPs16/UE57GE2GveywXjcz/ofszRN",
	"Idq/0wbUiVHvRspW2Vh4RJsF47ymBxSlJvYbVmWFsuUQQatryKGyVpk8SRbcVu0sLmST4Na82VonXD0E",
	"MRxK+saNCm78jnN+Ndm2y83onLtp5mg2bp6KBUP2B80qKb+ynQ5Iu6Wo5gW5EuhAVlhUxAZxeoT0/v4+",
	"Rn8cS71INndN8uvkp8vfP1/2BnEaV7apHVzLrc/y5OrPy+tT0SGCJWkT6PTjNE7dNalIoOKQwzBO4yFE",
	"fmPzGkwed+va2itUBhU7nXrak9IlZhvBX92vj3enZbg3SfbL4Hoa5EjGXshy9Z+a1nNaP6rBE73KDdhu",
	"i/KGbOZgPF0qB2H+nYq4s0sO26/fA15xyxntV7+XbPudlekl22FnF3nJNutM+edtRwHv6DUYnJHv+G3T",
	"oF5BDlekfbZxn3n/vK7aceHEA7sDmK7X6/W/AQAA//+bYHC5qQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
