// Package transformerserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package transformerserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Buildarch.
const (
	Arm32 Buildarch = "arm32"
	Arm64 Buildarch = "arm64"
	I386  Buildarch = "i386"
	X8664 Buildarch = "x86_64"
)

// Buildarch defines model for Buildarch.
type Buildarch string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// TransformRequest defines model for TransformRequest.
type TransformRequest struct {
	Attributes *struct {
		Buildarch Buildarch `json:"buildarch"`
		Uuid      UUID      `json:"uuid"`
	} `json:"attributes,omitempty"`
	Content *string `json:"content,omitempty"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// AnyRoutes defines model for anyRoutes.
type AnyRoutes = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// TransformResp defines model for TransformResp.
type TransformResp struct {
	Data *string `json:"data,omitempty"`
}

// TransformJSONRequestBody defines body for Transform for application/json ContentType.
type TransformJSONRequestBody = TransformRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Perform a transformation
	// (POST /{anyRoutes})
	Transform(ctx echo.Context, anyRoutes AnyRoutes) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Transform converts echo context to params.
func (w *ServerInterfaceWrapper) Transform(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "anyRoutes" -------------
	var anyRoutes AnyRoutes

	err = runtime.BindStyledParameterWithOptions("simple", "anyRoutes", ctx.Param("anyRoutes"), &anyRoutes, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter anyRoutes: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Transform(ctx, anyRoutes)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/:anyRoutes", wrapper.Transform)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW227jNhD9FWK6T4UsybbszeotaVPAQFsE2QQtGrjFWBpb3JVILkk58Qb+94KkL3Js",
	"JGmQPikOhzPnDM9cHqGQjZKChDWQP4JCjQ1Z0v4XitW1bC35HyWZQnNluRSQw63g31pivCRh+ZyTZnLO",
	"bEVMaTnnNcUQAXeGCm0FEQhsCPKOxwg0fWu5phJyq1uKwBQVNRhQWEva3f777rz3F/a+TzfftPdp+uMH",
	"iMCulPNnrOZiAev12vkzSgoT0GZp6j6FFJaE9WSUqnmBDn/yxTgSj0AP2KiagmVJkGdpGkFDxuDCub/A",
	"kjmYZGzEVE1oiBUVFV/ZSraacaFaC+su9A+a5pDDD8k+r0k4Ncml1lIHrIfJdGGuQxjnLUv7b8Pe72K/",
	"FdjaSmr+ncodeKXlkpfElljzkjkD937Bc6Bj3oHP+Sbw1u1c6mbzt2ENN4aLBZMufx5H4Dx8G+dhl/Mv",
	"Us94WZKI3AOxUjIhLatwSUyR9pGlYFYyLAoyhtmKG6bJyFYX9A7Ed/EDpextlLIupZuKthKkcoeV3aPx",
	"3OayFeV7PBkzigpXyZ0g/EmM0duKanRYVBPhihtrZkgvSTNymHYKtXrFcIFcsBot6XegdivoQVHh0sdP",
	"hQ7Mhm9jdiC/z6SXvCDWClwir3FW0//I60S02Lm90SiMK7lrMuoVrDp9V0tF2vJNw0fr//u01e6ar5x9",
	"ocKeguYGwS7pdouHbTu0d7Lh5yJctLwuUReVT7JoG8jvgA/PxhDBw9n4n3EGEaBuhoPwHWcwPRoBEYRM",
	"HfEIT/UIoQtBDlxY72njwIliEV5k95SnWO/n1V3wubefHuXk4BlCZz8ChtZqPtvO18OzWTclz8ljn7t1",
	"BG3Ly5cu3N5Ofj7i4y9GnainGHV09KImIvBxukUD/cGQstH4Y4/OPs16/UE57GE2GveywXjcz/ofszRN",
	"Idq/0wbUiVHvRspW2Vh4RJsF47ymBxSlJvYbVmWFsuUQQatryKGyVpk8SRbcVu0sLmST4Na82VonXD0E",
	"MRxK+saNCm78jnN+Ndm2y83onLtp5mg2bp6KBUP2B80qKb+ynQ5Iu6Wo5gW5EuhAVlhUxAZxeoT0/v4+",
	"Rn8cS71INndN8uvkp8vfP1/2BnEaV7apHVzLrc/y5OrPy+tT0SGCJWkT6PTjNE7dNalIoOKQwzBO4yFE",
	"fmPzGkwed+va2itUBhU7nXrak9IlZhvBX92vj3enZbg3SfbL4Hoa5EjGXshy9Z+a1nNaP6rBE73KDdhu",
	"i/KGbOZgPF0qB2H+nYq4s0sO26/fA15xyxntV7+XbPudlekl22FnF3nJNutM+edtRwHv6DUYnJHv+G3T",
	"oF5BDlekfbZxn3n/vK7aceHEA7sDmK7X6/W/AQAA//+bYHC5qQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
