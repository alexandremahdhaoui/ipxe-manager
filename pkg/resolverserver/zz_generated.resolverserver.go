// Package resolverserver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package resolverserver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// AnyPath defines model for anyPath.
type AnyPath = string

// AnyQuery defines model for anyQuery.
type AnyQuery = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// N503 defines model for 503.
type N503 = Error

// ResolveResponse defines model for ResolveResponse.
type ResolveResponse struct {
	Data *string `json:"data,omitempty"`
}

// ResolveParams defines parameters for Resolve.
type ResolveParams struct {
	AnyQuery *AnyQuery `form:"anyQuery,omitempty" json:"anyQuery,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resolve a config
	// (GET /resolve/{anyPath})
	Resolve(ctx echo.Context, anyPath AnyPath, params ResolveParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Resolve converts echo context to params.
func (w *ServerInterfaceWrapper) Resolve(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "anyPath" -------------
	var anyPath AnyPath

	err = runtime.BindStyledParameterWithOptions("simple", "anyPath", ctx.Param("anyPath"), &anyPath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter anyPath: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ResolveParams
	// ------------- Optional query parameter "anyQuery" -------------

	err = runtime.BindQueryParameter("form", true, false, "anyQuery", ctx.QueryParams(), &params.AnyQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter anyQuery: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Resolve(ctx, anyPath, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/resolve/:anyPath", wrapper.Resolve)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWf2/jNgz9KoJ2fx0c282P3tXAMHRDBxTYhl7vig0rOoCxaFt3tqRKctpeke8+0LLj",
	"pA3WIuj+SqJQfO+RFMlHnuvGaIXKO549cgMWGvRou1+gHi7AV/RVoMutNF5qxTN+peRti0wKVF4WEi3T",
	"BfMVMmN1IWuMecQlGRq6HnEFDfJs4y/iFm9baVHwzNsWI+7yChsIDLxHS3f/uT6d/A2T7zf9Zzo5uXn/",
	"jkfcPxjy5ryVquTrdUSOP7VoH8hBh3vb/doG/tSfjEgghCQ9UF9YbdB6iW6XQfz+OVrE8R4aU9PZT20r",
	"xY9QHE8Rp8Xk5HjxYTI/+QiTj8f4YbIopsfTk5PFx6WY7WG9pig4o5ULsPM0pY9cK4/KdwSNqWUOxDH5",
	"6ijwjyM4WQrk2TxNI96gc1CS+59BMAouOh8xUyM4ZHmF+Tf2oFvLpDKtJxFjGN5ZLHjGf0jGSkjCvy45",
	"s1bbwHW3AAjmMsCQt3l6dBj3o23uVwpaX2krv6PYkDdWr6RAtoJaCkYGVHPBc5Dj3kDPaQ88uC20bfrv",
	"jjXSOalKpil+HY+geXaY5tm25l+1XUohUEWUICY0U9qzClbIDNoOWSvmNYM8R+eYr6RjFp1ubY5vIHyD",
	"HyTND5M035b0pcKhBFFsuLI7cJ22QrdKvEXKmDOYU/fZApFPMBaHParF7qM6V9QQoGYO7QotQ+K0qVBv",
	"HxiUIBWrwaN9A2lXCu8N5hQ+uQ86KJsdpmyn/D6jXckcWatgBbKGZY3/o649aDG5vUSn6xVe9u3wFbq2",
	"5sVO7xbgu9PnI6I/0cuvmPt95Gh8bcI+dGZWWN10k80GjgyVMFoq3zntFRNiEP2MUIj6Iw8NhWdcKj+b",
	"juOA8luG4G6yso/+ODCvg8/R/mavOOphQyAh7wLZD8PTGu9BCYvsd6hEBbqVPOKtrXnGK++Ny5KklL5q",
	"l3GumwQG82awTqS5D5R3I/iFepN0XbhOL86H99n36oLaJxVjQw1clQzYn7istP7G+vxbWhtqmWNfAwNf",
	"A3mFbBqnz2je3d3F0P0da1sm/V2X/Hb+y9kfn88m0ziNK9/UxNVL3w3t84u/zi6fQfOIr9C6IOQoTuOU",
	"7miDCozkGZ/FaUxTnBaaLrFJXxDJY7/VrOm0xC7SVAGd6nPBs6G8u9vjenW9/xGNJsmwLq2j15iGBWd9",
	"82StmIYOuO/+xi55+gC7WfCKe2Q0jv+XbI+2xuZLtrOtefSS7Xyr0/+37SLwXbyGAxl1b7xtGqDVcsgj",
	"A5ZrVciSXjGUlEreFwO/Wa/X638DAAD//x87BvJVCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
